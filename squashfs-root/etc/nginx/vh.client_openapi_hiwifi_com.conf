
### version 0.0.1 ###
	server {
		listen			81;
		listen			80;
		listen			443 ssl;
		server_name		client.openapi.hiwifi.com;

		ssl_certificate     /etc/cert/client.openapi.hiwifi.com.crt;
		ssl_certificate_key /etc/cert/client.openapi.hiwifi.com.key;
	
		resolver                127.0.0.1;
		resolver_timeout        30s;

		root /usr/lib/openapi;
		error_log /tmp/log/nginx/error_openapi.log  error;

		fastcgi_intercept_errors on;
		
		include         tw.*.conf;
		
		if ( $tw_server_addr = $arg_dev_id ) {
			set $is_local  "1";
		}
		
		set $client_host "client-ext.openapi.hiwifi.com";

		location /{
			if ($is_local != "1") {
				proxy_pass http://$client_host;
			}
			
			set $script_name '/cgi-bin/openapi-cgi';
			
			fastcgi_pass unix:/var/run/fcgi-cgi.sock;
			fastcgi_param  PATH_INFO          $path_info;

			fastcgi_param  SCRIPT_FILENAME    $document_root$script_name;
			fastcgi_param  QUERY_STRING       $query_string;
			fastcgi_param  REQUEST_METHOD     $request_method;
			fastcgi_param  CONTENT_TYPE       $content_type;
			fastcgi_param  CONTENT_LENGTH     $content_length;

			fastcgi_param  SCRIPT_NAME        $script_name;
			fastcgi_param  REQUEST_URI        $request_uri;
			fastcgi_param  DOCUMENT_URI       $document_uri;
			fastcgi_param  DOCUMENT_ROOT      $document_root;
			fastcgi_param  SERVER_PROTOCOL    $server_protocol;
			fastcgi_param  HTTPS              $https if_not_empty;

			fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
			fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

			fastcgi_param  REMOTE_ADDR        $remote_addr;
			fastcgi_param  REMOTE_PORT        $remote_port;
			fastcgi_param  SERVER_ADDR        $server_addr;
			fastcgi_param  SERVER_PORT        $server_port;
			fastcgi_param  SERVER_NAME        $server_name;
		}
		
		location /get_client_addr {
			content_by_lua '
				local json = require "hiwifi.json"
				local arp = require("arp")
				local result = {}
				local client_addr = arp.get_mac(ngx.var.remote_addr)
				result["mac"] = client_addr
				ret = json.encode(result)
				ngx.say(ret)
			';
		}
	}
