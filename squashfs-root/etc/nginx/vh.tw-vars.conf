### version 0.0.1 ###
	server {
		listen			81;
		server_name		tw-vars;

		resolver		127.0.0.1;
		resolver_timeout	30s;

		server_name_in_redirect		off;
		recursive_error_pages		on;

		proxy_redirect		off;
		proxy_set_header	Host $host;
		proxy_set_header	X-Tw-Ori-Dst-Ip "";
		proxy_set_header	X-Tw-Ori-Src-Ip "";
		proxy_pass_header	Date;
		proxy_pass_header	Server;

		proxy_http_version	1.1;

		proxy_connect_timeout	120s;
		proxy_send_timeout	120s;
		proxy_read_timeout	120s;

		proxy_buffering		off;
		proxy_buffer_size	8k;
		proxy_buffers		8 32k;
		proxy_busy_buffers_size	64k;

		proxy_headers_hash_bucket_size	64;
		proxy_headers_hash_max_size	512;

		proxy_ignore_client_abort	off;
		proxy_temp_file_write_size	64k;
		proxy_max_temp_file_size	0;

		proxy_next_upstream		error timeout invalid_header http_500 http_502 http_503 http_504;

		set_ori_dst_ip	$tw_ori_dst_ip	"X-Tw-Ori-Dst-Ip";
		set_ori_src_ip	$tw_ori_src_ip	"X-Tw-Ori-Src-Ip";

		if ($tw_ori_src_ip = "") {
			set	$tw_ori_src_ip		$remote_addr;
		}

		include		tw.*.conf;

		set	$dest_host	$host;

		set_by_lua	$tw_netfilter	'
			local	tw_netfilter = 1

			if ngx.var.ori_dst_addr == ngx.var.server_addr then
				tw_netfilter = 0
			end

			return	tw_netfilter
		';

		if ($tw_netfilter) {
			set	$dest_host	$ori_dst_addr;
		}

		if ($tw_ori_dst_ip) {
			set	$dest_host	$tw_ori_dst_ip;
		}
	
		location / {
			return		400	"Bad Request";

		}

		location /get {
			content_by_lua		'
				if ngx.var.arg_key ~= nil and ngx.var.arg_key ~= "" then
					local	tw_vars = ngx.shared.tw_vars
					local	value, flags = tw_vars:get(ngx.var.arg_key)

					if value ~= nil and value ~= "" then
						ngx.say(value)
					else
						ngx.say("")
					end
				else
					ngx.say("")
				end
			';

		}

		location /set {
			content_by_lua		'
				if ngx.var.arg_key ~= nil and ngx.var.arg_key ~= "" and ngx.var.arg_value ~= nil and ngx.var.arg_value ~= "" then
					local	exptime = 0

					if ngx.var.arg_exptime ~= nil and ngx.var.arg_exptime ~= "" then
						exptime = ngx.var.arg_exptime
					end

					local	tw_vars = ngx.shared.tw_vars
					local	succ, err, forcible = tw_vars:set(ngx.var.arg_key, ngx.var.arg_value, exptime)

					if succ then
						ngx.say("set done")
					else
						ngx.say("set fail")
					end
				else
					ngx.say("set none")
				end
			';
		}

		location /delete {
			content_by_lua		'
				if ngx.var.arg_key ~= nil and ngx.var.arg_key ~= "" then
					local	tw_vars = ngx.shared.tw_vars
					tw_vars:delete(ngx.var.arg_key)

					ngx.say("delete done")
				else
					ngx.say("delete none")
				end
			';
		}

	}

