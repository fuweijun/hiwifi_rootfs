### version 0.1.4 ###
user			nobody nogroup;
worker_rlimit_nofile	4096;
worker_processes	1;

error_log		/dev/null crit;
pid			/var/run/nginx.pid;

events {
	worker_connections	4096;
	use			epoll;
	multi_accept		on;
}

http {
	server_tokens		off;
	include			mime.types;
	default_type		application/octet-stream;

	access_log	off;

	sendfile	off;
	tcp_nopush	on;
	tcp_nodelay	on;

	keepalive_timeout	2;
	send_timeout		30;

	gzip		off;

	client_header_buffer_size	8k;
	client_max_body_size		0;
	large_client_header_buffers	4 4k;
	client_body_buffers			16	4k;
	client_body_postpone_size	32k;
	ignore_invalid_headers		off;

	server_names_hash_bucket_size	128;
	map_hash_bucket_size		128;

	proxy_request_buffering		off;
	fastcgi_request_buffering	off;

	proxy_pass_header		Date;
	proxy_pass_header		Server;

	lua_package_path	'/etc/nginx/?.lua;;';
	lua_shared_dict		tw_vars		256k;

	init_by_lua		'
		local	tw_vars = ngx.shared.tw_vars
		local	arp = require("arp")
		local	line = ""

		local	file = io.open("/etc/nginx/switch")

		if file ~= nil then
			for line in file:lines() do
				local	tw_var = arp.split(line, ":")

				if #tw_var > 1 and tw_var[1] ~= nil and tw_var[1] ~= "" then
					tw_vars:set(tw_var[1], tw_var[2])
				end
			end

			io.close(file)
		end

		file = io.open("/etc/agreement")

		if file ~= nil then
			for line in file:lines() do
				local	tw_var = arp.split(line, ":")

				if #tw_var > 1 and tw_var[1] ~= nil and tw_var[1] ~= "" then
					tw_vars:set("AGREEMENT_" .. tw_var[1], tw_var[2])
				end
			end

			io.close(file)
		end
	';

	map $http_upgrade $connection_header {
		default			"";
		"~*Upgrade$"		upgrade;
		"~*close$"		close;

	}

	include		dict.*.conf;
	include		logformat.*.conf;
	include		upstream.*.conf;
	include		map.*.conf;
	include		vh.*.conf;

}

