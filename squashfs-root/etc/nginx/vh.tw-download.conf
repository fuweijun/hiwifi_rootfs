### version 0.0.1 ###
	server {
		listen 80; # /down_live uses port 80, CMAgent uses 81.
		listen			81;
		server_name		tw-download;

		access_log		/dev/null	tw-download;

		syslog			on;
		syslog_addr		127.0.0.1;
		syslog_port		515;
		syslog_program		"tw-download";
		syslog_log		tw-download;

		resolver		127.0.0.1;
		resolver_timeout	30s;

		server_name_in_redirect		off;
		recursive_error_pages		on;

		proxy_redirect		off;
		proxy_set_header	Host $host;
		proxy_set_header	X-Tw-Ori-Dst-Ip "";
		proxy_set_header	X-Tw-Ori-Src-Ip "";
		proxy_pass_header	Date;
		proxy_pass_header	Server;

		proxy_http_version	1.1;

		proxy_connect_timeout	120s;
		proxy_send_timeout	120s;
		proxy_read_timeout	120s;

		proxy_buffering		off;
		proxy_buffer_size	8k;
		proxy_buffers		8 32k;
		proxy_busy_buffers_size	64k;

		proxy_headers_hash_bucket_size	64;
		proxy_headers_hash_max_size	512;

		proxy_ignore_client_abort	off;
		proxy_temp_file_write_size	64k;
		proxy_max_temp_file_size	0;

		proxy_next_upstream		error timeout invalid_header http_500 http_502 http_503 http_504;

		set_ori_dst_ip	$tw_ori_dst_ip	"X-Tw-Ori-Dst-Ip";
		set_ori_src_ip	$tw_ori_src_ip	"X-Tw-Ori-Src-Ip";

		if ($tw_ori_src_ip = "") {
			set	$tw_ori_src_ip		$remote_addr;
		}

		include		tw.*.conf;

		set	$dest_host	$host;

		set_by_lua	$tw_netfilter	'
			local	tw_netfilter = 1

			if ngx.var.ori_dst_addr == ngx.var.server_addr then
				tw_netfilter = 0
			end

			return	tw_netfilter
		';

		if ($tw_netfilter) {
			set	$dest_host	$ori_dst_addr;
		}

		if ($tw_ori_dst_ip) {
			set	$dest_host	$tw_ori_dst_ip;
		}
	
		location /hiwifi_cache/ {
			internal;
			alias /;
		}

		location = / {
			set_by_lua $x_tw_info '
				local	x_tw_info = ""
				local	arp = require("arp")

				if ngx.var.tw_server_addr ~= nil and ngx.var.tw_server_addr ~= "" then
					x_tw_info = ngx.var.tw_server_addr .. "-" .. arp.get_mac(ngx.var.tw_ori_src_ip)
					ngx.req.set_header("X-Tw-Info", x_tw_info)
				end

				return	x_tw_info
			';

			access_by_lua	'
				if ngx.var.http_x_tw_dtype == nil or ngx.var.http_x_tw_dtype == "" or ngx.var.http_x_tw_durl == nil or ngx.var.http_x_tw_durl == "" or ngx.var.http_x_tw_dpri == nil or ngx.var.http_x_tw_dpri == "" then
					ngx.exit(ngx.HTTP_NOT_ALLOWED)
				end
			';

			proxy_pass	http://tw-download;
		}

		# Provide LAN clients a fake URL:
		# http://tw-download/down_live/the.real.domain/the_real_url
		location ~ ^/down_live/(.*)$ {
			set_by_lua $x_tw_info '
				local x_tw_info = ""
				local arp = require("arp")
				if ngx.var.tw_server_addr ~= nil and ngx.var.tw_server_addr ~= "" then
					x_tw_info = ngx.var.tw_server_addr ..	"-" .. arp.get_mac(ngx.var.tw_ori_src_ip)
					ngx.req.set_header("X-Tw-Info", x_tw_info)
				end
				return x_tw_info
			';

			set $realurl "http_//$1";
			proxy_set_header X-Tw-Durl $realurl;
			proxy_set_header X-Tw-Dpri "100";
			proxy_set_header X-Tw-Dtype "live";
			proxy_set_header X-Tw-Addons "ngx_acc";
			proxy_pass http://tw-download;
		}
	}

